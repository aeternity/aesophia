contract A = entrypoint init() = ()

main contract C =
    datatype custom_datatype('a) = CD('a)

    record custom_record('a) = { f : 'a }

    // pass
    function
        passing_ord : 'a is ord ; ('a, 'a) => bool
        passing_ord(x, y) = x >= y

    // pass
    function
        passing_eq : 'a is eq ; ('a, 'a) => bool
        passing_eq(x, y) = x == y

    // fail because eq is not specified for 'a
    function
        fail_no_eq : ('a, 'a) => bool
        fail_no_eq(x, y) = x == y

    // fail because 'b is not used
    function
        fail_unused_tvar : 'a is eq, 'b is eq ; ('a, 'a) => bool
        fail_unused_tvar(x, y) = x == y

    function
        fail_unknown_constraint : 'a is foo ; ('a) => 'a
        fail_unknown_constraint(x) = x

    // Ord types

    function bool_ord(x : bool, y : bool) = x >= y  // pass
    function bool_eq (x : bool, y : bool) = x == y  // pass

    function int_ord(x : int, y : int) = x >= y  // pass
    function int_eq (x : int, y : int) = x == y  // pass

    function char_ord(x : char, y : char) = x >= y  // pass
    function char_eq (x : char, y : char) = x == y  // pass

    function bits_ord(x : bits, y : bits) = x >= y  // pass
    function bits_eq (x : bits, y : bits) = x == y  // pass

    function bytes_ord(x : bytes(16), y : bytes(16)) = x >= y  // pass
    function bytes_eq (x : bytes(16), y : bytes(16)) = x == y  // pass

    function string_ord(x : string, y : string) = x >= y  // pass
    function string_eq (x : string, y : string) = x == y  // pass

    function hash_ord(x : hash, y : hash) = x >= y  // pass
    function hash_eq (x : hash, y : hash) = x == y  // pass

    function signature_ord(x : signature, y : signature) = x >= y  // pass
    function signature_eq (x : signature, y : signature) = x == y  // pass

    function address_ord(x : address, y : address) = x >= y  // pass
    function address_eq (x : address, y : address) = x == y  // pass

    // Eq types

    function event_ord(x : Chain.ttl, y : Chain.ttl) = x >= y  // fail
    function event_eq (x : Chain.ttl, y : Chain.ttl) = x == y  // pass

    function contract_ord(x : A, y : A) = x >= y  // fail
    function contract_eq (x : A, y : A) = x == y  // pass

    // Noncomparable types

    type lam = (int, char) => bool

    function lambda_ord(x : lam, y : lam) = x >= y  // fail
    function lambda_eq (x : lam, y : lam) = x == y  // fail

    // Ord composite types of ord

    function list_of_ord_ord(x : list(int), y : list(int)) = x >= y  // pass
    function list_of_ord_eq (x : list(int), y : list(int)) = x == y  // pass

    function option_of_ord_ord(x : option(int), y : option(int)) = x >= y  // pass
    function option_of_ord_eq (x : option(int), y : option(int)) = x == y  // pass

    function tuple_of_ord_ord(x : (int * bool), y : (int * bool)) = x >= y  // pass
    function tuple_of_ord_eq (x : (int * bool), y : (int * bool)) = x == y  // pass

    // Ord composite types of eq

    function list_of_eq_ord(x : list(A), y : list(A)) = x >= y  // fail
    function list_of_eq_eq (x : list(A), y : list(A)) = x == y  // pass

    function option_of_eq_ord(x : option(A), y : option(A)) = x >= y  // fail
    function option_of_eq_eq (x : option(A), y : option(A)) = x == y  // pass

    function tuple_of_eq_ord(x : (A * int), y : (A * int)) = x >= y  // fail
    function tuple_of_eq_eq (x : (A * int), y : (A * int)) = x == y  // pass

    // Ord composite types of nomcomparable

    function list_of_noncomp_ord(x : list(lam), y : list(lam)) = x >= y  // fail
    function list_of_noncomp_eq (x : list(lam), y : list(lam)) = x == y  // fail

    function option_of_noncomp_ord(x : option(lam), y : option(lam)) = x >= y  // fail
    function option_of_noncomp_eq (x : option(lam), y : option(lam)) = x == y  // fail

    function tuple_of_noncomp_ord(x : (lam * int), y : (lam * int)) = x >= y  // fail
    function tuple_of_noncomp_eq (x : (lam * int), y : (lam * int)) = x == y  // fail

    // Eq composite types of ord

    function map_of_ord_ord(x : map(int, int), y : map(int, int)) = x >= y  // fail
    function map_of_ord_eq (x : map(int, int), y : map(int, int)) = x == y  // pass

    function oracle_of_ord_ord(x : oracle(int, int), y : oracle(int, int)) = x >= y  // fail
    function oracle_of_ord_eq (x : oracle(int, int), y : oracle(int, int)) = x == y  // pass

    function oracle_query_of_ord_ord(x : oracle_query(int, int), y : oracle_query(int, int)) = x >= y  // fail
    function oracle_query_of_ord_eq (x : oracle_query(int, int), y : oracle_query(int, int)) = x == y  // pass

    function datatype_of_ord_ord(x : custom_datatype(int), y : custom_datatype(int)) = x >= y  // fail
    function datatype_of_ord_eq (x : custom_datatype(int), y : custom_datatype(int)) = x == y  // pass

    function record_of_ord_ord(x : custom_record(int), y : custom_record(int)) = x >= y  // fail
    function record_of_ord_eq (x : custom_record(int), y : custom_record(int)) = x == y  // pass

    // Eq composite types of eq

    function map_of_eq_ord(x : map(A, A), y : map(A, A)) = x >= y  // fail
    function map_of_eq_eq (x : map(A, A), y : map(A, A)) = x == y  // pass

    function oracle_of_eq_ord(x : oracle(A, A), y : oracle(A, A)) = x >= y  // fail
    function oracle_of_eq_eq (x : oracle(A, A), y : oracle(A, A)) = x == y  // pass

    function oracle_query_of_eq_ord(x : oracle_query(A, A), y : oracle_query(A, A)) = x >= y  // fail
    function oracle_query_of_eq_eq (x : oracle_query(A, A), y : oracle_query(A, A)) = x == y  // pass

    function datatype_of_eq_ord(x : custom_datatype(A), y : custom_datatype(A)) = x >= y  // fail
    function datatype_of_eq_eq (x : custom_datatype(A), y : custom_datatype(A)) = x == y  // pass

    function record_of_eq_ord(x : custom_record(A), y : custom_record(A)) = x >= y  // fail
    function record_of_eq_eq (x : custom_record(A), y : custom_record(A)) = x == y  // pass

    // Eq composite types of nomcomparable

    function map_of_noncomp_ord(x : map(lam, lam), y : map(lam, lam)) = x >= y  // fail
    function map_of_noncomp_eq (x : map(lam, lam), y : map(lam, lam)) = x == y  // fail

    function oracle_of_noncomp_ord(x : oracle(lam, lam), y : oracle(lam, lam)) = x >= y  // fail
    function oracle_of_noncomp_eq (x : oracle(lam, lam), y : oracle(lam, lam)) = x == y  // fail

    function oracle_query_of_noncomp_ord(x : oracle_query(lam, lam), y : oracle_query(lam, lam)) = x >= y  // fail
    function oracle_query_of_noncomp_eq (x : oracle_query(lam, lam), y : oracle_query(lam, lam)) = x == y  // fail

    function datatype_of_noncomp_ord(x : custom_datatype(lam), y : custom_datatype(lam)) = x >= y  // fail
    function datatype_of_noncomp_eq (x : custom_datatype(lam), y : custom_datatype(lam)) = x == y  // pass

    function record_of_nomcomp_ord(x : custom_record(lam), y : custom_record(lam)) = x >= y  // fail
    function record_of_nomcomp_eq (x : custom_record(lam), y : custom_record(lam)) = x == y  // pass

    entrypoint init() =
        let passing_ord_ord     = passing_ord([1], [2])              // pass
        let passing_ord_eq      = passing_ord({[1] = 2}, {[2] = 3})  // fail
        let passing_ord_noncomp = passing_ord((x) => x, (x) => x)    // fail

        let passing_eq_ord     = passing_eq([1], [2])              // pass
        let passing_eq_eq      = passing_eq({[1] = 2}, {[2] = 3})  // pass
        let passing_eq_noncomp = passing_eq((x) => x, (x) => x)    // fail

        ()